================
  atocha: TODO
================

- Finish dataflow diagram.

- Add a phase for adapting the args from various sources, CGI, mod_python,
  draco, etc.  You will need to observe, characterize and normalize the data
  types that each of these sources present.

- Implement replacement value types!!!!!

- Finish htmlout renderer.

- Convert all my codebase to atocha.



Tests
=====

- Automate tests for four cases: hidden, valid, invalid, empty

Progress:
* form_rsimple.py
* form_rhtmlout.py

on the fields: maybe we have to add the following methods:
- hidden_value( self, dvalue ) 
- display_value( self, dvalue ) 

- move the css styles for the table on the renderer classes themselves.  The
  styles should be default'ed on the classes and looked up with 'self.' so
  that it becomes possible to simply override those in derived classes.



- We need to support a replacement value of the incorrect type for fields.




Ideas
=====

Renderer
--------

Fields
------


- Other widgets:

   - Reset button, see Quixote for some examples.
   - Agree button, bool checkbox that MUST be enabled by the user.

- Rendering radio buttons that have no default value currently initializes
  without a selection (invalid to submit).

- prepare_values() implementations may have to be different when the
  field is a hidden type.  How do you deal with this?

Parser
------

- We could add a method in this object that will simply allow redirecting,
  because this object always knows how to store the form data, form errors,
  etc.

- Maybe we could eventually provide a way to at least decode the args which
  have no corresponding field in the form (if that never becomes necessary,
  don't do so).







Changes to adapt existing hume code with
----------------------------------------

default=  becomes  initial=
notnull=  becomes  required=

Field.prepare_value becomes render_value
Field.parse becomes Field.parse_value
Form.addField becomes Field.addfield

Remove method calls on former FormError class:
    def formerrors( self ):
    def errlabels( self ):
    def errnames( self ):
    def errfields( self ):

- Orientation for radio fields has become an int, change from 'minitable'.

ActiveDateField become JSDateField

ListField becomes CheckboxesField

hidden fields now require an explicit 'hidden=1' option.





form_parser: Needs a concrete implementation for hume:

# FIXME: change this to use the errors to check if there are errors
        if self._status:
            if not self._messages:
                setStatus(self._status, self.__generic_message)
            else:
                setStatus(self._status, '  '.join(self._messages))

            if len(self):
                setFormData(self._form.name, self)
            if self._errors:
                setFormErrors(self._form.name, self._errors)




