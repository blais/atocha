================
  atocha: TODO
================
:Author: Martin Blais <blais@furius.ca>

.. contents::
..
    1  Bugs and Minor Things to Fix
    2  Documentation
    3  Testing
    4  Known Bugs and Misfeatures
    5  Ideas
    6  Future New Field Types
    7  New Features


Bugs and Minor Things to Fix
============================

- Restrict the number of imports when doing::

     from atocha import *

  Currently there is a fair amount of pollution from it, we need to do something
  about this (run pylint).  See import-cleanup/test.py and complete.

- Provide an atocha.initialize() fucntion, and if it has not been called with
  the required init parameters raise an exception upon trying to use the
  library.  This should be used as a way to force you to explicitly initialize
  the library before using it, thereby making it harder for beginners to forget
  to do that.

- The 'hidepw' option for rendering the password fields should be automatically
  determined on whether the protocol is http or https, can we do this somehow?
  Where do we feed in the information about the protocol?

- Spaces in email addresses are simply removed and they should instead generate
  some kind of error.

- Maybe it would be nice to be able to end() multiple times... maybe we should
  rename the call to check()?

- Process the scriptsdir with the action evaluator, it is a URL after all.


Documentation
=============

- Write more complete usage documentation for Atocha, in LaTeX, using the
  standard Python tools.

- Add documentation on the checks that should be made between parsing and
  ending, to see if a field has no error before attempting to validate it, e.g.

    f = FormParser(form, args, 'showform')

    if f.ok('apples') and f.o.apples > 4:
        f.error(apples=(_("You must specify more than 4", 4))

    o = f.end()

- Add a section in document about dealing with multiple submit buttons and an
  example.

- Document why we need to provide non-i18n str over unicode strings.

  - i18n must occur at render time, because only then the context is setup for
    the appropriate language.

  - Form objects can be initialized and kept over many requests which have
    potentially different languages.  Not having to create the complex Form
    objects on every request (just to be able to translate) can be a speed
    advantage.

- Add a configuration flag that will disable all i18n calls except for the
  internal messages.


Testing
=======

- In the automated tests, you could configure the parser to raise an exception
  on error (without changing the parser code) and catch it with assertRaises.


Known Bugs and Misfeatures
==========================

- FieldErrors should perhaps support a status field, so that individual field
  validation could set a specific status, which would help indicate globally
  what the error is when there is a single one.

  You need to decide if/when the error-many gets used and if/when it does not.
  This is important, because right now error-many is set when there is a single
  error but no message at all.  Should FieldError be able to carry a status as
  well?  e.g. UsernameField could generate a invalid-username error...?

- There is a circular dependency between the parser and its accessor object and
  this causes the GC to be invoked.

- Sometimes we want to getvalue() and getsubmit() from a completed parser, but
  when using the static method we get the accessor object.  This has one
  advantage: when using the static method we return the accessor object only and
  thus we make sure that the parser cannot be used anymore.  We could consider
  return the parser only and making the accessor object only work when accessed
  from the parser as parser.o.<fieldname>. This way we could avoid the circular
  dependency and always returning the parser (even from the static method) would
  yield a more regular interface. Plus I think that there are some cases where
  the methods on the accessor are not sufficient, even when the parser is
  complete.

- The JSDateField does not yet support disabled/read-only states.  We would need
  to change the JavaScript file to support that.

- You need to customize the javascript file when you copy them, to adjust some
  of the paths at the top of the file to point to the appropriate icons that it
  refers.

- We do support accessibility features yet (but we could and we will). See notes
  below.

- We need to support more of the JS tags. - onclick - onchange, etc.  I need
  more time to test them, for now I just put the ones that I needed immediately
  (checkboxes, menus).

- The tests don't run in optimized mode, this is not really a bug, but rather
  just to the assert function that we use in the test.

- It would be nice to be able to give a special CSS class to a buttons array
  form, in case we want to specialize its style.  Also, we might want to render
  the buttons array with the INPUT type 'button' rather than 'submit'.

- We could share the values and submit value between the FormParser and
  ParserAccessor using a weakref form the accessor to the parser rather than the
  kludgy approach we're using now.




Ideas
=====

- We should add an option to tell Atocha to expect strings that are already
  translated.  This would be useful for people who do not have an appropriate
  i18n setup instead of a ``_ = lambda x: x`` solution.

- attributes_declare should perhaps include the default values, and when we
  validate the attributes those default values could be set for later access to
  set the default values when popping the keyword arguments.

- Maybe we should make StringField use a default encoding of latin-1 and create
  a UnicodeField for strings with default encoding 'unicode'.

- Maybe at some point we should fully recognize that the FormParser is really
  just the temporary runaround dict and make it derive from dict rather than
  provide alternative methods and to make it behave somewhat like a
  dict... maybe this would make more sense.

- We could make the MenuField convert the data to be returned from a specific
  type, e.g. int, to avoid client code.

- Write a simple example of templating library integration, something simple
  that everyone can understand, just replacing div tags with ids by regexps or
  something.

- Document the types_* subtypes where a list is present.  Type assertions should
  use a debugging function that can be noop'ed and that otherwise recurses into
  the lists for better type checking and that can be noop'ed for efficiency.
  Find a way to do that.

- Consider making the implementation for the form renderer use a delegate rather
  than derivation.  The delegate would be specified as a class attribute on the
  form renderer itself.  This reflects well the fact that the form renderer
  changes, but the styling code contains no if little variable code.

  I'm not sure about this, since the text form renderer already does take an
  option...

- Support accessibilityL FIELDSET, LEGEND, LABEL tags for organization.  Deal
  with Access keys, tab index.  This should be a simple matter of supporting
  adding attributes and then making the renderers support them.  Support
  ACCESS-KEYS and TABINDEX for widgets that are not hidden?

- Support general client-side scripting hooks (core events and input events)?
  Also, can we somehow integrate button input fields for client-side scripting?

- Support images for submit buttons.

- Implement a ``ButtonForm`` class that will render a form with a single submit
  button, just to redirect somewhere, no table.  General purpose buttons that
  would be a form in themselves... we need to provide some mechanism for easily
  rendering those rather than to have to define an empty form.

- Implement 'noempty' in the renderers (previous code: it isn't used much apart
  from the profile and cannot be guaranteed to make sense anymore.  We are
  better work around it in the client code.)

  This is actually not quite right: in the display renderer, it does make sense
  to not want to render fields for which there is no value set.  It only makes
  sense for the display-only renderer.  Maybe that renderer could take an option
  in its constructor?

- For the parser: Maybe we could eventually provide a way to at least decode the
  args which have no corresponding field in the form (if that never becomes
  necessary, don't do so).

- For Menus:

  * Support disabled state for single options.
  * Support option groups and associated disabled state.

- Restructure tests to automate all fields for four cases: hidden, valid,
  invalid, empty.

- We could consider automatically generating an SQLObject description from the
  Form description.

- Perhaps we should renamed "Field" to "Control"?  That would be more intuitive,
  as the meaning of "Field" is rather vague (in Atocha, a Field may contain many
  HTML widgets/inputs).


Future New Field Types
======================

- Complete the SetFileField with some JavaScript to hide the file input field
  when the reset button is checked.

- Implement a CaptchaField which generates a captcha image automatically.

- Maybe derive from FileUpload and implement a Photograph field that reads the
  value entirely and can print it and display it.  That field could also have
  some Javascript to reset that field automatically.

- Implement a BoolField that requires being checked (AgreeField).

- Grab some of the fields from other libraries and adapt.  Also look at widgets
  from FormEncode and see if some of them can be adapted to my framework.

- Implement a menu that redirects on change based on this:
  http://cscie12.dce.harvard.edu/lecture_notes/20050316/slide50.html

- Something to fix eventually: the JSDateField script has hardcoded paths for
  its accompanying images... not sure what to do about this yet. I suppose the
  user has to copy the files anyway, so it might be ok to assume he might edit
  the scripts somewhat.


New Features
============

- Provide some kind of helper function that will generate CRUD resources for a
  given form.  This should be very easy!

