===============================
   atocha: Web Forms Library
===============================

.. contents::


Description
===========

*Atocha* is a Python library for *parsing* and *rendering* data from web forms.
It is framework-agnostic, generic, and it should be possible to use it with CGI
scrips or to incorporate it in your favourite web application framework


Motivation
----------

Just before I decided to write this (2005-10-08), I had the following problems:

- There was no both *decent* and *simple* library that could parse input from
  widgets and perform automatic types conversions reliably, that was not tied to
  a specific web application framework;

- I was having lots of trouble in the various data paths of my handlers with
  type conversions, often having unicode encoding problems;

- I felt that the problem of handling and rendering web forms were really tied
  closely, and that it could be solved in a generic manner.

At the time, I had written my own web application framework, and a small form
library I had copied from somewhere had grown into a messy monster. So I decided
to attack the problem and rewrite it separately, with the following goals in
mind:

#. Reuse the form definition for parsing submitted arguments as well as
   rendering and displaying data (leverage the knowledge stored in the form
   definition as much as possible);

#. Robustness: an emphasis on strict type checking and robustness via tests;

#. Fields automatically perform appropriate type conversion when returning the
   parsed value to the user; Like desktop toolkit widgets, fields may return all
   sorts of data types;


Essentially, I wanted functionality closer to what desktop UI toolkits provide,
which is often not present in web form parsing toolkits.


Documentation
=============

Ultimately, you'll have to delve into the heavily documented code to find out
about all the gory details, but the simple introduction in this section will
give you a taste for what the library can do for you.

Some documents:

- `Data Flow and Data Paths <doc/handpath.html>`_
- `Overview and Tutorial <doc/tutorial.html>`_


Features
========

.. FIXME complete this list...

- **Generic** library that is able to reused in many frameworks and
  applications;

- **Extensible**: it is easy to create and add new field types without having to
  modify the framework.

- Fields may render to **multiple input widgets** and are consolidated in a
  single value automatically;

- **Internationalization (I18n)** of all messages is supported (all messages
  generated by the library are grouped in a s single place and can be easily
  customized);

- Supports hidden widgets for **multiple-page forms**;

- Supports **per-field errors**, to be rendered next to the erroneous widgets;

- Supports a UI message and status for the re-rendering a form with errors;


Online Demo
===========

You can try an online demo of a form with all the available widgets, that was
implemented using simple CGI scripts.  You can visit the source code from the
demo web pages too. 

- `Online Demo -- Try It Now! <test/demo/cgi-bin/display.cgi>`_

.. note:: This simple demo does not use session management, so if many people
          access it at the same time you may be surprised by other people's
          values appearing in the results.


Download
========

Snapshots of the latest pipexcel source code can be found in the `Download Area
</downloads/atocha>`_.  If you make any modification to the source, please
update and run the tests.


Reporting Bugs
==============

Send email to the author: Martin Blais <blais@furius.ca>.


.. Links
.. =====


Installation and Dependencies
=============================

- Python >=2.3


Copyright and License
=====================

Copyright (C) 2005  Martin Blais.
This code is distributed under the `GNU General Public License <COPYING>`_.


Acknowledgements
================

The Atocha library has evolved a lot from my original use of the form.py file in
the `draco framework`__ written by Geert Jansen.  I originally copied and
modified the file quite a bit, and at some point I got really frustrated in my
mess, being constantly in data type conversion hell and decided to rewrite the
whole thing completely, with a particular emphasis on identifying and checking
the types which flow throughout the life of a request.

__ http://draco.boskant.nl/


Author
======

Martin Blais <blais@furius.ca>

